package sp80056c_test

import (
	"crypto/sha256"
	"hash"

	. "github.com/jmalloc/motif/internal/cryptov1/internal/sp80056c"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("func DeriveKeyHMAC()", func() {
	DescribeTable(
		"it correctly derives keys",
		func(
			algo func() hash.Hash,
			secret, salt, info []byte,
			expected []byte,
		) {
			actual := DeriveKeyHMAC(
				algo,
				secret,
				salt,
				info,
				len(expected),
			)
			Expect(actual).To(Equal(expected))
		},
		Entry(
			"SHA-256 #1",
			sha256.New,
			[]byte{0x6e, 0xe6, 0xc0, 0x0d, 0x70, 0xa6, 0xcd, 0x14, 0xbd, 0x5a, 0x4e, 0x8f, 0xcf, 0xec, 0x83, 0x86}, // secret
			[]byte{0x53, 0x2f, 0x51, 0x31, 0xe0, 0xa2, 0xfe, 0xcc, 0x72, 0x2f, 0x87, 0xe5, 0xaa, 0x20, 0x62, 0xcb}, // salt
			[]byte{0x86, 0x1a, 0xa2, 0x88, 0x67, 0x98, 0x23, 0x12, 0x59, 0xbd, 0x03, 0x14},                         // info
			[]byte{0x13, 0x47, 0x9e, 0x9a, 0x91, 0xdd, 0x20, 0xfd, 0xd7, 0x57, 0xd6, 0x8f, 0xfe, 0x88, 0x69, 0xfb}, // expected
		),
		Entry(
			"SHA-256 #2",
			sha256.New,
			[]byte{0x98, 0xf5, 0x03, 0x45, 0xfd, 0x97, 0x06, 0x39, 0xa1, 0xb7, 0x93, 0x5f, 0x50, 0x1e, 0x1d, 0x7c}, // secret
			[]byte{0x36, 0x91, 0x93, 0x94, 0x61, 0x24, 0x7e, 0x9f, 0x74, 0x38, 0x2a, 0xe4, 0xef, 0x62, 0x9b, 0x17}, // salt
			[]byte{0x6d, 0xdb, 0xdb, 0x13, 0x14, 0x66, 0x31, 0x52, 0xc3, 0xcc, 0xc1, 0x92},                         // info
			[]byte{0x56, 0xf4, 0x21, 0x83, 0xed, 0x3e, 0x28, 0x72, 0x98, 0xdb, 0xbe, 0xcf, 0x14, 0x3f, 0x51, 0xac}, // expected
		),
		Entry(
			"SHA-256 #3",
			sha256.New,
			[]byte{0x02, 0xb4, 0x0d, 0x33, 0xe3, 0xf6, 0x85, 0xae, 0xae, 0x67, 0x7a, 0xc3, 0x44, 0xee, 0xaf, 0x77}, // secret
			[]byte{0x0a, 0xd5, 0x2c, 0x93, 0x57, 0xc8, 0x5e, 0x47, 0x81, 0x29, 0x6a, 0x36, 0xca, 0x72, 0x03, 0x9c}, // salt
			[]byte{0xc6, 0x7c, 0x38, 0x95, 0x80, 0x12, 0x8f, 0x18, 0xf6, 0xcf, 0x85, 0x92},                         // info
			[]byte{0xbe, 0x32}, // expected
		),
		Entry(
			"SHA-256 #4",
			sha256.New,
			[]byte{0x02, 0xb4, 0x0d, 0x33, 0xe3, 0xf6, 0x85, 0xae, 0xae, 0x67, 0x7a, 0xc3, 0x44, 0xee, 0xaf, 0x77}, // secret
			[]byte{0x0a, 0xd5, 0x2c, 0x93, 0x57, 0xc8, 0x5e, 0x47, 0x81, 0x29, 0x6a, 0x36, 0xca, 0x72, 0x03, 0x9c}, // salt
			[]byte{0xc6, 0x7c, 0x38, 0x95, 0x80, 0x12, 0x8f, 0x18, 0xf6, 0xcf, 0x85, 0x92},                         // info
			[]byte{0xbe, 0x32, 0xe7, 0xd3}, // expected
		),
		Entry(
			"SHA-256 #5",
			sha256.New,
			[]byte{0x02, 0xb4, 0x0d, 0x33, 0xe3, 0xf6, 0x85, 0xae, 0xae, 0x67, 0x7a, 0xc3, 0x44, 0xee, 0xaf, 0x77}, // secret
			[]byte{0x0a, 0xd5, 0x2c, 0x93, 0x57, 0xc8, 0x5e, 0x47, 0x81, 0x29, 0x6a, 0x36, 0xca, 0x72, 0x03, 0x9c}, // salt
			[]byte{0xc6, 0x7c, 0x38, 0x95, 0x80, 0x12, 0x8f, 0x18, 0xf6, 0xcf, 0x85, 0x92},                         // info
			[]byte{
				0xbe, 0x32, 0xe7, 0xd3, 0x06, 0xd8, 0x91, 0x02,
				0x8b, 0xe0, 0x88, 0xf2, 0x13, 0xf9, 0xf9, 0x47,
				0xc5, 0x04, 0x20, 0xd9, 0xb5, 0xa1, 0x2c, 0xa6,
				0x98, 0x18, 0xdd, 0x99, 0x95, 0xde, 0xdd, 0x8e,
				0x61, 0x37, 0xc7, 0x10, 0x4d, 0x67, 0xf2, 0xca,
			}, // expected
		),
		Entry(
			"SHA-256 #6",
			sha256.New,
			[]byte{0xf4, 0xe1}, // secret
			[]byte{0x36, 0x38, 0x27, 0x1c, 0xcd, 0x68, 0xa2, 0x5d, 0xc2, 0x4e, 0xcd, 0xdd, 0x39, 0xef, 0x3f, 0x89}, // salt
			[]byte{0x34, 0x8a, 0x37, 0xa2, 0x7e, 0xf1, 0x28, 0x2f, 0x5f, 0x02, 0x0d, 0xcc},                         // info
			[]byte{0x3f, 0x66, 0x1e, 0xc4, 0x6f, 0xcc, 0x1e, 0x11, 0x0b, 0x88, 0xf3, 0x3e, 0xe7, 0xdb, 0xc3, 0x08}, // expected
		),
	)
})
